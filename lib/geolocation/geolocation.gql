##
#
# Geolocation module
#
# Defines a generic data structure to represent a physical location
#
# @package  vf-graphql
# @since    2019-02-11
#
##

union GeoScope

"""
A physical mappable location.
"""
type SpatialThing {
  id: ID!

  "An informal or formal textual identifier for a location. Does not imply uniqueness."
  name: String!

  "An address that will be recognized as mappable by mapping software."
  mappableAddress: String

  "Latitude."
  lat: Float

  "Longitude."
  long: Float

  "Altitude."
  alt: Float

  "A textual description or comment."
  note: String,

  geom: Json,

  ##############################################################################
  # inverse relationships and queries - FIXME
  # agents: [Agent!]
  # economicResources: [EconomicResource!]
  # economicEvents: [EconomicEvent!]
  # commitments: [Commitment!]
  # intents: [Intent!]

  ## CommonsPub-specific

  canonicalUrl: String
  displayUsername: String
  inScopeOf: [GeoScope]
}



input SpatialThingCreateParams {
  "An informal or formal textual identifier for a location. Does not imply uniqueness."
  name: String!

  "An address that will be recognized as mappable by mapping software."
  mappableAddress: String

  "Latitude."
  lat: Float

  "Longitude."
  long: Float

  "Altitude."
  alt: Float

  "A textual description or comment."
  note: String
}

input SpatialThingUpdateParams {
  id: ID!

  "An informal or formal textual identifier for a location. Does not imply uniqueness."
  name: String

  "An address that will be recognized as mappable by mapping software."
  mappableAddress: String

  "Latitude."
  lat: Float

  "Longitude."
  long: Float

  "Altitude."
  alt: Float

  "A textual description or comment."
  note: String
}

type SpatialThingResponse {
  spatialThing: SpatialThing
}

type SpatialThingsPage{
  page_info: PageInfo
  edges: [SpatialThing]
  totalCount: Int
}


type GeolocationQuery {
  spatialThing(id: ID): SpatialThing
  spatialThings(start: ID, limit: Int): [SpatialThing!]
  spatialThingsPages(limit: Int, before: [Cursor], after: [Cursor]): [SpatialThingsPage!]
}

type GeolocationMutation {
  createSpatialThing(spatialThing: SpatialThingCreateParams!, inScopeOf: ID): SpatialThingResponse
  updateSpatialThing(spatialThing: SpatialThingUpdateParams!): SpatialThingResponse
  deleteSpatialThing(id: String!): Boolean
}
